# This is a basic workflow to help you get started with Actions

name: on-master

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: 'master'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v1
      # pylint step
      - uses: cclauss/GitHub-Action-for-pylint@0.7.0
        with:
          args: 'pylint src/bert_implementation.py'
      # rm temporarily the init file
      - uses: JesseTG/rm@v1.0.0
        with:
          path: ./src/__init__.py

      - uses: deep5050/autopy-lot@1.1
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          input_type: py
          output_type: ipynb
          output_dir: './'

      -  uses: actions/upload-artifact@v2
         with:
          name: release-${{ github.run_number }}
          path: src/bert_implementation.ipynb  
      
      -   uses: actions/create-release@v1
          id: create_release
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
            tag_name: release-${{ github.run_number }}
            # The name of the release. For example, `Release v1.0.1`
            release_name: "Release #${{ github.run_number }}"
            # Text describing the contents of the tag.
            body: ""
      - uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # The URL for uploading assets to the release
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          # The path to the asset you want to upload
          asset_path: ./src/bert_implementation.ipynb 
          # The name of the asset you want to upload
          asset_name: bert_implementation.ipynb 
          # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
          asset_content_type: application/json

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8 #install the python needed
      - run: python deploy_to_kaggle.py

      - uses: harupy/push-kaggle-kernel@master
        env:
          # Do not leak your credentials.
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        with:
          id: simonmeoni/bert-twitter-sentiment-extraction
          title: bert-twitter-sentiment-extraction
          code_file: src/bert_implementation_to_kaggle.ipynb
          language: python
          kernel_type: notebook
          enable_internet: true
          competition_sources: tweet-sentiment-extraction